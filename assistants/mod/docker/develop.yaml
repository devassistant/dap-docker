name: Run a Development Container
description: Runs a Docker.io container for your project, mounting your source code in. Let this run while you're developing.

args:
  reuse_image:
    flags: [-i, --reuse-image]
    help: "Provide a name of image to reuse."
  path:
    use: common_args
  mountpoint:
    flags: [-m, --mountpoint]
    help: "Specify directory to mount source code in; defaults to first 'ADD' instruction of Dockerfile."

dependencies:
- rpm: ['python-docker-py']

pre_run:
- if $path:
  - cl: cd $path

run:
- if $reuse_image:
  - $candidates~: $(docker images -q | grep "^$reuse_image" -m 1)
  - if not $LAST_LRES:
    - log_e: No image $reuse_image!
  - $image: $reuse_image
- else:
  - $image~:
    - docker_b: .
- log_i: Using image "$image" - you can use this next time with --reuse-image option.
- if not $mountpoint:
  # we assume that there's just one "ADD" instruction and we mount code there
  - $mountpoint~: $(cat Dockerfile | grep "^ADD" -m 1 | awk '{ print $3 }')
  - if not $mountpoint:
    - log_e: Can't find a place where to mount source code, please rerun with -m parameter.
- $curdir~: $(basename `pwd`)

- $container~: $(docker run -d -t -v `pwd`:$mountpoint -P $image)
- $ip~: $(docker inspect -format='{{.NetworkSettings.IPAddress}}' $container)
- $container_name~: $(docker inspect -format='{{.Name}}' $container)
# by default, Docker shows 12 chars of the hash to user, so do the same
- $container_short~: $(echo $container | cut -c -12)

- log_i: 'New container: hash "$container_short", name "$container_name"'
- log_i: Your source code is mounted in container directory "$mountpoint"
- log_i: 'IP address of the container: "$ip"'

# TODO: use a docker_a command, that will be able to react to users interrupt signal
# but not shut down DA
- log_i: Attaching to container output ...
- cl_i: docker attach $container
